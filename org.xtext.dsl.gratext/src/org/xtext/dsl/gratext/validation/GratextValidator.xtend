/* generated by Xtext 2.10.0
 */
package org.xtext.dsl.gratext.validation

import org.eclipse.xtext.validation.Check
import org.xtext.dsl.gratext.gratext.Dispositivos
import org.xtext.dsl.gratext.gratext.GratextPackage
import org.xtext.dsl.gratext.gratext.accion

/**
 * This class contains custom validation rules. 
 * @author : Jose antonio de Benito Suarez
 * Esta clase contiene los validadores necesarios para  el programa funcione correctamente
 */
class GratextValidator extends AbstractGratextValidator {
	/**
	 * Parametros estaticos que sirven para diferenciar los errores
	 */
	public static val INVALID_NAME = 'invalidName'
	public static val NAME_LONG = 'Nombre_Largo'
	public static val ACCION_INCORRECTA = 'Accion_incorrecta'
	public static val TEMPERATURA_INCORRECTA = 'Temperatura_incorrecta'
	public static val NUMERO_INCORRECTO = 'Numero_incorrecto'
	public static val ACCION_ESTADO = 'Accion_estado'
	public static val NUMERO_ENTERO="Numero_entero"
	public static val ACCION_BARRERA="Accion_Barrera"
	public static val TEMPERATURA_LUGAR="Temperatura_Lugar"
	public static val ACCION_ADE ="Accion_ADE"
	public static val ACCION_AUMENTAR_DISMINUIR= "Accion_aumentar_disminuir"
	public static val ACCION_CAMARA= "Accion_camara"
	public static val DISPOSITIVO_INCORRECTO= "Dispositivo_incorrecto"
	protected int i = 0;

/**
 * Metodo que checkea si el dispositivo es la barrera y la accion es correcta
 */
	@Check
	def checkDispositvoBarrerar(Dispositivos dispositivo) {
		if (dispositivo.nombre.getName.equals("BARRERA_SEGURIDAD") && !checkBarrera(dispositivo.accion)) {
			error("La accion no es la correcta para este dispositivo barrera",
				GratextPackage.Literals.DISPOSITIVOS__ACCION, ACCION_BARRERA)

		}

	}
/**
 * Metodo que checkea  la accion es correcta de la barrera
 */
def checkBarrera(accion accion) {
		if (accion.nombreAccion.getName.equals("ABRIR") || accion.nombreAccion.getName.equals("CERRAR") ||
			accion.nombreAccion.getName.equals("ESTADO"))
			true
	}
	/**
 * Metodo que checkea si el codigo del dispositivo 
 */
	@Check
	def checkCodigo(Dispositivos dispositivo) {
		if (dispositivo.codigo.length > 20) {
			warning(
				"No se recomiendan nombres de codigos de mas de 20 carcateres",
				GratextPackage.Literals.DISPOSITIVOS__CODIGO,
				NAME_LONG
			)
		}

	}
	
	
/**
 * Metodo que checkea si el dispositivo es la camara y la accion es correcta
 */
	@Check
	def checkDispositivoCamara(Dispositivos dispositivo) {
		if (dispositivo.nombre.getName.equals("CAMARA") && !checkCamara(dispositivo.accion)) {
			error("La accion no es la correcta para este dispositivo solo camara",
				GratextPackage.Literals.DISPOSITIVOS__ACCION, ACCION_CAMARA)

		}
	}
/**
 * Metodo que checkea  la accion es correcta de la carmara
 */
	def checkCamara(accion accion) {
		if (accion.nombreAccion.getName.equals("ABRIR") || accion.nombreAccion.getName.equals("CERRAR") ||
			accion.nombreAccion.getName.equals("SACAR") || accion.nombreAccion.getName.equals("GRABAR") ||
			accion.nombreAccion.getName.equals("ACTIVAR") || accion.nombreAccion.getName.equals("DESACTIVAR"))
			true
	}
/**
 * Metodo que checkea los dispositivo que solo pueden tener la accion de estado
 */
	@Check
	def checkDispositivoEstado(Dispositivos dispositivo) {
		if ((dispositivo.nombre.getName.equals("DEPOSITO_LECHE") || dispositivo.nombre.getName.equals("EMERGENCIA") ||
			dispositivo.nombre.getName.equals("FUEGO_HUMO") || dispositivo.nombre.getName.equals("INUNDACION") ||
			dispositivo.nombre.getName.equals("VIENTO") || dispositivo.nombre.getName.equals("ROTURA_CRISTAL") ||
			dispositivo.nombre.getName.equals("CO2") || dispositivo.nombre.getName.equals("LLUVIA") ||
			dispositivo.nombre.getName.equals("ESTACION_METEOROLOGICA") ||
			dispositivo.nombre.getName.equals("TEMPERATURA")  ||
			dispositivo.nombre.getName.equals("GAS")||
			dispositivo.nombre.getName.equals("PRESENCIA")||
			dispositivo.nombre.getName.equals("MECEDORA")||
			dispositivo.nombre.getName.equals("PULSOMETRO_GANADO")) && !checkEstado(dispositivo.accion)) {
			error("La accion no es la correcta para este dispositivo estados",
				GratextPackage.Literals.DISPOSITIVOS__ACCION, ACCION_ESTADO)

		}
	}
/**
 * Metodo que checkea la accion de estado
 */
	def checkEstado(accion accion) {
		if (accion.nombreAccion.getName.equals("ESTADO"))
			true
	}

/**
 * Metodo que checkea los dispositivos con acciones de abrir, cerrar, desactivar, activar
 */
	@Check
	def checkDispositivoADE(Dispositivos dispositivo) {
		if ((dispositivo.nombre.getName.equals("ROBOT_LIMPIADOR") || dispositivo.nombre.getName.equals("LUMINOSIDAD") ||
			dispositivo.nombre.getName.equals("NEVERAS") || dispositivo.nombre.getName.equals("RADIOFRECUENCIA") ) &&
			!checkADE(dispositivo.accion)) {
			error("La accion no es la correcta para este dispositivo ADE", GratextPackage.Literals.DISPOSITIVOS__ACCION,
				ACCION_ADE)

		}
	}


/**
 * Metodo que checkea las acciones de abrir, cerrar, desactivar, activar
 */
	def checkADE(accion accion) {
		if (checkEstado(accion) || accion.nombreAccion.getName.equals("APAGAR") ||
			accion.nombreAccion.getName.equals("ENCENDER") || accion.nombreAccion.getName.equals("ACTIVAR") ||
			accion.nombreAccion.getName.equals("DESCATIVAR"))
			true
	}

	

/**
 * Metodo que checkea los dispositivos con datos numericos
 */
	@Check
	def checkDispositivosNumerosEnteros(Dispositivos dispositivo) {
		if (!comprobarDispositivosNumericos(dispositivo) && !dispositivo.accion.numero.idNumero.isNullOrEmpty) {
			error("No se pueden poner valores numericos " + dispositivo.nombre,
				GratextPackage.Literals.DISPOSITIVOS__ACCION, NUMERO_INCORRECTO)
		} else if (dispositivo.nombre.getName.equals("CAMARA") &&
			comprobarNumero(dispositivo.accion.numero.idNumero).equals("float")) {
			error("El dispositivo " + dispositivo.nombre + " no admite valores decimales",
				GratextPackage.Literals.DISPOSITIVOS__ACCION, NUMERO_ENTERO)
		}

	}

/**
 * Metodo que comrpueba el tipo de dato que se transmite
 */
	def comprobarNumero(String numero) {

		while (i < numero.length) {
			if (!Character.isDigit(numero.charAt(i))) {

				return "float";
			}
			i++;
		}
		i = 0;

		return "int"
	}

/**
 * Metodo que checkea los dispositivos con datos numericos
 */
	def comprobarDispositivosNumericos(Dispositivos dispositivo) {
		if (dispositivo.nombre.getName.equals("TERMOSTATO") || dispositivo.nombre.getName.equals("CAMARA") ||
			dispositivo.nombre.getName.equals("LUZ"))
			true
	}

/**
 * Metodo que checkea el dispositivo temperatura 
 */
	@Check
	def checkDispositivoTemperatura(Dispositivos dispositivo) {
		if (checkIsTemperatura(dispositivo) && dispositivo.temperatura==null){
			warning("Recuerde que necesita el lugar AMBIENTE/INTERNA/NEVERA/MECEDORA/DEPOSITO_LECHE", GratextPackage.Literals.DISPOSITIVOS__NOMBRE, TEMPERATURA_INCORRECTA)
			
		}
		else if (!checkIsTemperatura(dispositivo) && (dispositivo.temperatura!=null) ){
			error("No es posible poner esto"+ dispositivo.temperatura +" para " + dispositivo.nombre + " solo se de poner para el dispositivo TEMPERATURA",
				GratextPackage.Literals.DISPOSITIVOS__TEMPERATURA, TEMPERATURA_INCORRECTA)
		}else if (!checkTemperatura(dispositivo.temperatura)&& checkIsTemperatura(dispositivo) && (dispositivo.temperatura!=null) ){
			error("Error existe el valor " + dispositivo.temperatura + " debe de poner  AMBIENTE/INTERNA/NEVERA/MECEDORA/DEPOSITO_LECHE",
				GratextPackage.Literals.DISPOSITIVOS__TEMPERATURA, TEMPERATURA_LUGAR)
			}
	}

/**
 * Metodo que checkea los lugares donde se puede medir la temperatura
 */
	def checkTemperatura(String estado) {
		if (estado.toUpperCase.equals("AMBIENTE") || estado.toUpperCase.equals("INTERNA") ||
			estado.toUpperCase.equals("NEVERA") || estado.toUpperCase.equals("MECEDORA") ||
			estado.toUpperCase.equals("DEPOSITO_LECHE") || estado.toUpperCase.equals("EXTERNA"))
			return true
		return false
	}
	
/**
 * Metodo que checkea los dispositivos de temperatura o termostato
 */
def checkIsTemperatura(Dispositivos dispositivo) {
		if (dispositivo.nombre.getName.equals("TEMPERATURA")|| dispositivo.nombre.getName.equals("TERMOSTATO") )
			return true
		return false
	}

/**
 * Metodo que checkea los dispositivos con acciones de amuento y disminucion
 */
@Check
def checkAumentarDisminuir(Dispositivos dispositivo){
	if(checkDispositivosAumento(dispositivo) && checkAumentoDisminu(dispositivo.accion) && dispositivo.accion.numero==null){
			warning("Acuerdese del valor que quiere AUMENTAR/ DISMINUIR " + dispositivo.nombre,
			GratextPackage.Literals.DISPOSITIVOS__ACCION, ACCION_INCORRECTA)
			
			}
			
			else if(!checkDispositivosAumento(dispositivo) && checkAumentoDisminu(dispositivo.accion)){
			error("Error al poner el dispositivo solo puede aumentar y disminuir el termostato o la luz",
			GratextPackage.Literals.DISPOSITIVOS__NOMBRE, DISPOSITIVO_INCORRECTO)
			
			}else if(checkDispositivosAumento(dispositivo)&& !checkAumentoDisminu(dispositivo.accion) ){
				error("Error al realizar la accion solo es aumentar o disminuir",
			GratextPackage.Literals.DISPOSITIVOS__ACCION, ACCION_AUMENTAR_DISMINUIR)
			}
}


/**
 * Metodo que checkea las  acciones de aumento y disminucion
 */
def checkAumentoDisminu(accion accion){
	if(accion.nombreAccion.getName.equals("AUMENTAR")
		|| accion.nombreAccion.getName.equals("DISMINUIR"))
	return true
	return false
}


/**
 * Metodo que checkea los dispositivos con acciones de aumento y disminucion
 */
def checkDispositivosAumento(Dispositivos dispositivo){
	 if(dispositivo.nombre.getName.equals("TERMOSTATO")||
			dispositivo.nombre.getName.equals("LUZ"))
			return true
	return	false
}


/**
 * Metodo que checkea los tipo de datos enviados por el dispositivo
 */
@Check
def checkDatos(Dispositivos dispositivo){
	if(dispositivo.accion.numero.datos!= null && !checkDato(dispositivo))
		error("Error en el dato ",
			GratextPackage.Literals.DISPOSITIVOS__ACCION, ACCION_INCORRECTA)
}

/**
 * Metodo que checkea los dispositivos con posiblidad de mandar datos
 */
def checkDato(Dispositivos dispositivo){

	if((dispositivo.nombre.getName.equals("CAMARA") && dispositivo.accion.numero.datos.getName.equals("FOTOS") )||
		(dispositivo.nombre.getName.equals("TERMOSTATO")&& dispositivo.accion.numero.datos.getName.equals("GRADOS") ) ||
			(dispositivo.nombre.getName.equals("LUZ")&& dispositivo.accion.numero.datos.getName.equals("VOLTIOS") ))
				return true
	else 
		return false

}
}
