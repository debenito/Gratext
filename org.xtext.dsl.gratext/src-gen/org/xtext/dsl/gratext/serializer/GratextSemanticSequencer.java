/*
 * generated by Xtext 2.10.0
 */
package org.xtext.dsl.gratext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.dsl.gratext.gratext.Dispositivos;
import org.xtext.dsl.gratext.gratext.Granja;
import org.xtext.dsl.gratext.gratext.GratextPackage;
import org.xtext.dsl.gratext.gratext.accion;
import org.xtext.dsl.gratext.gratext.contrasena;
import org.xtext.dsl.gratext.gratext.usuario;
import org.xtext.dsl.gratext.services.GratextGrammarAccess;

@SuppressWarnings("all")
public class GratextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GratextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GratextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GratextPackage.DISPOSITIVOS:
				sequence_Dispositivos(context, (Dispositivos) semanticObject); 
				return; 
			case GratextPackage.GRANJA:
				sequence_Granja(context, (Granja) semanticObject); 
				return; 
			case GratextPackage.ACCION:
				sequence_accion(context, (accion) semanticObject); 
				return; 
			case GratextPackage.CONTRASENA:
				sequence_contrasena(context, (contrasena) semanticObject); 
				return; 
			case GratextPackage.USUARIO:
				sequence_usuario(context, (usuario) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Dispositivos returns Dispositivos
	 *
	 * Constraint:
	 *     (codigo=ID nombre=TiposDispositivo temperatura=Estado? accion=accion)
	 */
	protected void sequence_Dispositivos(ISerializationContext context, Dispositivos semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Granja returns Granja
	 *
	 * Constraint:
	 *     (name=STRING tipo=Tipo usuario=usuario contrasena=contrasena dispositivos+=Dispositivos*)
	 */
	protected void sequence_Granja(ISerializationContext context, Granja semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     accion returns accion
	 *
	 * Constraint:
	 *     (nombreAccion=NombreAccion numero=numero? descripcion=STRING?)
	 */
	protected void sequence_accion(ISerializationContext context, accion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     contrasena returns contrasena
	 *
	 * Constraint:
	 *     contrasena=STRING
	 */
	protected void sequence_contrasena(ISerializationContext context, contrasena semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GratextPackage.Literals.CONTRASENA__CONTRASENA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GratextPackage.Literals.CONTRASENA__CONTRASENA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContrasenaAccess().getContrasenaSTRINGTerminalRuleCall_0(), semanticObject.getContrasena());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     usuario returns usuario
	 *
	 * Constraint:
	 *     usuario=ID
	 */
	protected void sequence_usuario(ISerializationContext context, usuario semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GratextPackage.Literals.USUARIO__USUARIO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GratextPackage.Literals.USUARIO__USUARIO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUsuarioAccess().getUsuarioIDTerminalRuleCall_0(), semanticObject.getUsuario());
		feeder.finish();
	}
	
	
}
