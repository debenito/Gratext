/**
 * generated by Xtext 2.10.0
 */
package org.xtext.dsl.gratext.gratext.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.dsl.gratext.gratext.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GratextFactoryImpl extends EFactoryImpl implements GratextFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GratextFactory init()
  {
    try
    {
      GratextFactory theGratextFactory = (GratextFactory)EPackage.Registry.INSTANCE.getEFactory(GratextPackage.eNS_URI);
      if (theGratextFactory != null)
      {
        return theGratextFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GratextFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GratextFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GratextPackage.GRANJA: return createGranja();
      case GratextPackage.LOGIN: return createlogin();
      case GratextPackage.DISPOSITIVOS: return createDispositivos();
      case GratextPackage.ACCION: return createaccion();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GratextPackage.TIPO:
        return createTipoFromString(eDataType, initialValue);
      case GratextPackage.TIPOS_DISPOSITIVO:
        return createTiposDispositivoFromString(eDataType, initialValue);
      case GratextPackage.NOMBRE_ACCION:
        return createNombreAccionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GratextPackage.TIPO:
        return convertTipoToString(eDataType, instanceValue);
      case GratextPackage.TIPOS_DISPOSITIVO:
        return convertTiposDispositivoToString(eDataType, instanceValue);
      case GratextPackage.NOMBRE_ACCION:
        return convertNombreAccionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Granja createGranja()
  {
    GranjaImpl granja = new GranjaImpl();
    return granja;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public login createlogin()
  {
    loginImpl login = new loginImpl();
    return login;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dispositivos createDispositivos()
  {
    DispositivosImpl dispositivos = new DispositivosImpl();
    return dispositivos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public accion createaccion()
  {
    accionImpl accion = new accionImpl();
    return accion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tipo createTipoFromString(EDataType eDataType, String initialValue)
  {
    Tipo result = Tipo.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTipoToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TiposDispositivo createTiposDispositivoFromString(EDataType eDataType, String initialValue)
  {
    TiposDispositivo result = TiposDispositivo.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTiposDispositivoToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NombreAccion createNombreAccionFromString(EDataType eDataType, String initialValue)
  {
    NombreAccion result = NombreAccion.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertNombreAccionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GratextPackage getGratextPackage()
  {
    return (GratextPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GratextPackage getPackage()
  {
    return GratextPackage.eINSTANCE;
  }

} //GratextFactoryImpl
