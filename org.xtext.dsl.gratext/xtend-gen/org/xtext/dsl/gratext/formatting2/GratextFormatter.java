/**
 * generated by Xtext 2.10.0
 */
package org.xtext.dsl.gratext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.dsl.gratext.gratext.Dispositivos;
import org.xtext.dsl.gratext.gratext.Granja;
import org.xtext.dsl.gratext.gratext.accion;
import org.xtext.dsl.gratext.services.GratextGrammarAccess;

/**
 * @author : Jose antonio de Benito Suarez
 * Clase predefinida para el formateo de codigo
 */
@SuppressWarnings("all")
public class GratextFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GratextGrammarAccess _gratextGrammarAccess;
  
  /**
   * Metodo extendido de la clase AbstractFormatter2 para formatear el codigo de la granja
   */
  protected void _format(final Granja granja, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.autowrap(30);
    };
    document.<Granja>append(granja, _function);
    document.<String>format(granja.getLogin().getUsuario());
    document.<String>format(granja.getLogin().getContrasena());
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      this._gratextGrammarAccess.getML_COMMENTRule();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.<Granja>append(document.<Granja>append(granja, _function_1), _function_2);
    EList<Dispositivos> _dispositivos = granja.getDispositivos();
    for (final Dispositivos dispositivos : _dispositivos) {
      document.<Dispositivos>format(dispositivos);
    }
  }
  
  /**
   * Metodo
   * extendido de la clase AbstractFormatter2 para modificar el formato de los dispositivos
   */
  protected void _format(final Dispositivos dispositivos, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(dispositivos).keyword("Codigo :"), _function);
    document.<accion>format(dispositivos.getAccion());
  }
  
  public void format(final Object dispositivos, final IFormattableDocument document) {
    if (dispositivos instanceof XtextResource) {
      _format((XtextResource)dispositivos, document);
      return;
    } else if (dispositivos instanceof Dispositivos) {
      _format((Dispositivos)dispositivos, document);
      return;
    } else if (dispositivos instanceof Granja) {
      _format((Granja)dispositivos, document);
      return;
    } else if (dispositivos instanceof EObject) {
      _format((EObject)dispositivos, document);
      return;
    } else if (dispositivos == null) {
      _format((Void)null, document);
      return;
    } else if (dispositivos != null) {
      _format(dispositivos, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(dispositivos, document).toString());
    }
  }
}
