/**
 * generated by Xtext 2.10.0
 */
package org.xtext.dsl.gratext.ui.quickfix;

import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.xtext.dsl.gratext.validation.GratextValidator;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 * 
 * * @author :Jose antonio de Benito Suarez
 * Clase utilizada para el menu de contexto que ayuda al usuario a crear un dispositivo correctamente
 */
@SuppressWarnings("all")
public class GratextQuickfixProvider extends DefaultQuickfixProvider {
  /**
   * Metodo para la correcion de un dispositivo cuando su accion es incorrecta
   */
  @Fix(GratextValidator.ACCION_ESTADO)
  public void arreglarAccion(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero ESTADO");
    };
    acceptor.accept(issue, "modificar accion segun dispositivo", "Se modificara la accion a estado", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo cuando su numero es incorrecta
   */
  @Fix(GratextValidator.NUMERO_ENTERO)
  public void arreglarNumero(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      final String nombreActual = xtextDocumente.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
      Integer _offset = issue.getOffset();
      Integer _length = issue.getLength();
      String _replace = nombreActual.replace(".", "");
      String _plus = ("" + _replace);
      xtextDocumente.replace((_offset).intValue(), (_length).intValue(), _plus);
    };
    acceptor.accept(issue, "Modificacion del numero", "Se modificara numero dado que solo permite valores enteros", "dispositivos.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo barrera tiene una
   * accion incorrecta modificandola por abrir
   */
  @Fix(GratextValidator.ACCION_BARRERA)
  public void arreglarBarreraAbrir(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "quiero ABRIR");
    };
    acceptor.accept(issue, "Modificacion de la barrera por abrir", "Se modificara por la accion de abrir", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo barrera tiene una
   * accion incorrecta modificandola por cerrar
   */
  @Fix(GratextValidator.ACCION_BARRERA)
  public void arreglarBarreraCerrar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "quiero CERRAR");
    };
    acceptor.accept(issue, "Modificacion de la barrera por cerrar", "Se modificara por la accion de cerrar", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo barrera tiene una
   * accion incorrecta modificandola por estado
   */
  @Fix(GratextValidator.ACCION_BARRERA)
  public void arreglarBarreraEstado(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "quiero ESTADO");
    };
    acceptor.accept(issue, "Modificacion de la barrera por estado", "Se modificara por la accion de estado", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo temperatura tiene un
   * lugar de tempertara incorrecto modificandola por ambiente
   */
  @Fix(GratextValidator.TEMPERATURA_LUGAR)
  public void arreglarBarreraAmbiente(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "\'AMBIENTE\'");
    };
    acceptor.accept(issue, "Modificacion de la temperatura por AMBIENTE", "Se modificara por la temperatura AMBIENTE", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo temperatura tiene un
   * lugar de tempertara incorrecto modificandola por interna
   */
  @Fix(GratextValidator.TEMPERATURA_LUGAR)
  public void arreglarBarreraINTERNA(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "\'INTERNA\'");
    };
    acceptor.accept(issue, "Modificacion de la temperatura por INTERNA", "Se modificara por la temperatura INTERNA", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo temperatura tiene un
   * lugar de tempertara incorrecto modificandola por nevera
   */
  @Fix(GratextValidator.TEMPERATURA_LUGAR)
  public void arreglarBarreraNEVERA(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "\'NEVERA\'");
    };
    acceptor.accept(issue, "Modificacion de la temperatura por NEVERA", "Se modificara por la temperatura NEVERA", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo temperatura tiene un
   * lugar de tempertara incorrecto modificandola por mecedora
   */
  @Fix(GratextValidator.TEMPERATURA_LUGAR)
  public void arreglarBarreraMECEDORA(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "\'MECEDORA\'");
    };
    acceptor.accept(issue, "Modificacion de la temperatura por MECEDORA", "Se modificara por la temperatura MECEDORA", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo temperatura tiene un
   * lugar de tempertara incorrecto modificandola por deposito de leche
   */
  @Fix(GratextValidator.TEMPERATURA_LUGAR)
  public void arreglarBarreraDEPOSITO_LECHE(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "\'DEPOSITO_LECHE\'");
    };
    acceptor.accept(issue, "Modificacion de la temperatura por DEPOSITO de LECHE", "Se modificara por la temperatura DEPOSITO deLECHE", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo que tiene una accion de las
   * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender estado) modificandola por la accion
   * correcta de estado
   */
  @Fix(GratextValidator.ACCION_ADE)
  public void arreglarADEestado(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero ESTADO");
    };
    acceptor.accept(issue, "Modificacion de la accion por ESTADO", "Se modificara por la accion ESTADO", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo que tiene una accion de las
   * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender, estado) modificandola por la accion
   * correcta de activar
   */
  @Fix(GratextValidator.ACCION_ADE)
  public void arreglarADEactivar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero ACTIVAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por ACTIVAR", "Se modificara por la accion ACTIVAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo que tiene una accion de las
   * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender estado) modificandola por la accion
   * correcta de descativar
   */
  @Fix(GratextValidator.ACCION_ADE)
  public void arreglarADEdesactivar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero DESACTIVAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por DESACTIVAR", "Se modificara por la accion DESACTIVAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo que tiene una accion de las
   * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender, estado) modificandola por la accion
   * correcta de apagar
   */
  @Fix(GratextValidator.ACCION_ADE)
  public void arreglarADEapagar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero APAGAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por APAGAR", "Se modificara por la accion APAGAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo que tiene una accion de las
   * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender, estado) modificandola por la accion
   * correcta de encender
   */
  @Fix(GratextValidator.ACCION_ADE)
  public void arreglarADEencender(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero ENCENDER");
    };
    acceptor.accept(issue, "Modificacion de la accion por ENCENDER", "Se modificara por la accion ENCENDER", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo que tiene una accion de las
   * de aumento o disminucion modificandola por la accion
   * correcta de aumentar
   */
  @Fix(GratextValidator.ACCION_AUMENTAR_DISMINUIR)
  public void arreglarAumentar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero AUMENTAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por AUMENTAR", "Se modificara por la accion AUMENTAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo que tiene una accion de las
   * de aumento o disminucion modificandola por la accion
   * correcta de disminuir
   */
  @Fix(GratextValidator.ACCION_AUMENTAR_DISMINUIR)
  public void arreglarDisminuir(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero DISMINUIR");
    };
    acceptor.accept(issue, "Modificacion de la accion por DISMINUIR", "Se modificara por la accion DISMINUIR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
   * modificandola por la accion abrir
   */
  @Fix(GratextValidator.ACCION_CAMARA)
  public void arreglarCamaraAbrir(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero ABRIR");
    };
    acceptor.accept(issue, "Modificacion de la accion por ABRIR", "Se modificara por la accion ABRIR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
   * modificandola por la accion cerrar
   */
  @Fix(GratextValidator.ACCION_CAMARA)
  public void arreglarCamaraCerrar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero CERRAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por CERRAR", "Se modificara por la accion CERRAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
   * modificandola por la accion sacar
   */
  @Fix(GratextValidator.ACCION_CAMARA)
  public void arreglarCamaraSacar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero SACAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por SACAR", "Se modificara por la accion SACAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
   * modificandola por la accion grabar
   */
  @Fix(GratextValidator.ACCION_CAMARA)
  public void arreglarCamaraGrabar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero GRABAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por GRABAR", "Se modificara por la accion GRABAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
   * modificandola por la accion activar
   */
  @Fix(GratextValidator.ACCION_CAMARA)
  public void arreglarCamaraActivar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero ACTIVAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por ACTIVAR", "Se modificara por la accion ACTIVAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
   * modificandola por la accion desactivar
   */
  @Fix(GratextValidator.ACCION_CAMARA)
  public void arreglarCamaraDesactivar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), " quiero DESACTIVAR");
    };
    acceptor.accept(issue, "Modificacion de la accion por DESACTIVAR", "Se modificara por la accion DESACTIVAR", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de otro dispositivo que no sea termostato y que tiene una accion
   * de aumento/disminucion modificando este dispositivo por termostato
   */
  @Fix(GratextValidator.DISPOSITIVO_INCORRECTO)
  public void arreglarDispositivoTermostato(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "TERMOSTATO");
    };
    acceptor.accept(issue, "Modificacion del dispositivo por TERMOSTATO", "Se modificara el dispositivo por TERMOSTATO", "acciones.gif", _function);
  }
  
  /**
   * Metodo para la correcion de otro dispositivo que no sea luz y que tiene una accion
   * de aumento/disminucion modificando este dispositivo por luz
   */
  @Fix(GratextValidator.DISPOSITIVO_INCORRECTO)
  public void arreglarDispositivoLuz(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocumente = context.getXtextDocument();
      xtextDocumente.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "LUZ");
    };
    acceptor.accept(issue, "Modificacion del dispositivo por LUZ", "Se modificara el dispositivo por LUZ", "acciones.gif", _function);
  }
}
