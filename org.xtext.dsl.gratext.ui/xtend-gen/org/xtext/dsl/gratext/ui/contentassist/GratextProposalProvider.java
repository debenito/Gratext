/**
 * generated by Xtext 2.10.0
 */
package org.xtext.dsl.gratext.ui.contentassist;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.dsl.gratext.gratext.Dispositivos;
import org.xtext.dsl.gratext.gratext.Granja;
import org.xtext.dsl.gratext.gratext.NombreAccion;
import org.xtext.dsl.gratext.gratext.TiposDispositivo;
import org.xtext.dsl.gratext.gratext.accion;
import org.xtext.dsl.gratext.ui.contentassist.AbstractGratextProposalProvider;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class GratextProposalProvider extends AbstractGratextProposalProvider {
  /**
   * override complete_Ingrediente(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
   * 	//super.complete_Ingrediente(model, ruleCall, context, acceptor)
   * 	var propuesta=
   * 	createCompletionProposal("Ingrediente: CODIGO 'NOMBRE' infoUrl: http://www.ejemplo.com",context);
   * 	acceptor.accept(propuesta);
   * }
   * 
   * def void completeIngrediente_Name(Ingrediente i, Assignment a ,ContentAssistContext context, ICompletionProposalAcceptor acceptor){
   * 	super.completeIngrediente_Name(i,a,context,acceptor);
   * 	var r = i.eContainer as Restaurante;
   * 	var id = "CODI"+ (r.ingredientes.filter(typeof (Ingrediente)).size);
   * 	var propuesta = createCompletionProposal(id,context);
   * 	acceptor.accept(propuesta);
   * 
   * }
   */
  @Override
  public void complete_Granja(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal propuesta = this.createCompletionProposal("Granja: NOMBRE_GRANJA\r\n\t\t\tCentralita: TIPO_DISPOSITIVO", context);
    acceptor.accept(propuesta);
  }
  
  @Override
  public void complete_login(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal propuesta = this.createCompletionProposal("Usuario: NOMBRE_USUARIO\r\n\t\t Contraseña: \'CONTRASEÑA\'", context);
    acceptor.accept(propuesta);
  }
  
  @Override
  public void complete_Dispositivos(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal propuesta = this.createCompletionProposal("Codigo: CODIGO Sensor  NOMBRE_SENSOR quiero ACCION \'DESCRIPCION\' ", context);
    acceptor.accept(propuesta);
  }
  
  public void completeDispositivos_Codigo(final Dispositivos i, final Assignment a, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeDispositivos_Codigo(i, a, context, acceptor);
    EObject _eContainer = i.eContainer();
    Granja r = ((Granja) _eContainer);
    EList<Dispositivos> _dispositivos = r.getDispositivos();
    Iterable<Dispositivos> _filter = Iterables.<Dispositivos>filter(_dispositivos, Dispositivos.class);
    int _size = IterableExtensions.size(_filter);
    String id = ("CODI" + Integer.valueOf(_size));
    ICompletionProposal propuesta = this.createCompletionProposal(id, context);
    acceptor.accept(propuesta);
  }
  
  public void completeAccion_Descripcion(final accion accion, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeAccion_Descripcion(accion, assignment, context, acceptor);
    EObject _eContainer = accion.eContainer();
    Dispositivos r = ((Dispositivos) _eContainer);
    org.xtext.dsl.gratext.gratext.accion _accion = r.getAccion();
    String _numero = _accion.getNumero();
    boolean _notEquals = (!Objects.equal(_numero, null));
    if (_notEquals) {
      TiposDispositivo _nombre = r.getNombre();
      boolean _equals = _nombre.equals("CAMARA");
      if (_equals) {
        org.xtext.dsl.gratext.gratext.accion _accion_1 = r.getAccion();
        NombreAccion _nombreAccion = _accion_1.getNombreAccion();
        String _plus = ("\' " + _nombreAccion);
        String _plus_1 = (_plus + " ");
        org.xtext.dsl.gratext.gratext.accion _accion_2 = r.getAccion();
        String _numero_1 = _accion_2.getNumero();
        String _plus_2 = (_plus_1 + _numero_1);
        String _plus_3 = (_plus_2 + " fotos de la ");
        TiposDispositivo _nombre_1 = r.getNombre();
        String _plus_4 = (_plus_3 + _nombre_1);
        String descripcion = (_plus_4 + "\'");
        ICompletionProposal propuesta = this.createCompletionProposal(descripcion, context);
        acceptor.accept(propuesta);
      } else {
        TiposDispositivo _nombre_2 = r.getNombre();
        boolean _equals_1 = _nombre_2.equals("TERMOSTATO");
        if (_equals_1) {
          org.xtext.dsl.gratext.gratext.accion _accion_3 = r.getAccion();
          NombreAccion _nombreAccion_1 = _accion_3.getNombreAccion();
          String _plus_5 = ("\' " + _nombreAccion_1);
          String _plus_6 = (_plus_5 + " ");
          org.xtext.dsl.gratext.gratext.accion _accion_4 = r.getAccion();
          String _numero_2 = _accion_4.getNumero();
          String _plus_7 = (_plus_6 + _numero_2);
          String _plus_8 = (_plus_7 + "grados el ");
          TiposDispositivo _nombre_3 = r.getNombre();
          String _plus_9 = (_plus_8 + _nombre_3);
          String descripcion_1 = (_plus_9 + "\'");
          ICompletionProposal propuesta_1 = this.createCompletionProposal(descripcion_1, context);
          acceptor.accept(propuesta_1);
        } else {
          TiposDispositivo _nombre_4 = r.getNombre();
          boolean _equals_2 = _nombre_4.equals("LUZ");
          if (_equals_2) {
            org.xtext.dsl.gratext.gratext.accion _accion_5 = r.getAccion();
            NombreAccion _nombreAccion_2 = _accion_5.getNombreAccion();
            String _plus_10 = ("\' " + _nombreAccion_2);
            String _plus_11 = (_plus_10 + " ");
            org.xtext.dsl.gratext.gratext.accion _accion_6 = r.getAccion();
            String _numero_3 = _accion_6.getNumero();
            String _plus_12 = (_plus_11 + _numero_3);
            String _plus_13 = (_plus_12 + "vatios la ");
            TiposDispositivo _nombre_5 = r.getNombre();
            String _plus_14 = (_plus_13 + _nombre_5);
            String descripcion_2 = (_plus_14 + "\'");
            ICompletionProposal propuesta_2 = this.createCompletionProposal(descripcion_2, context);
            acceptor.accept(propuesta_2);
          }
        }
      }
    } else {
      org.xtext.dsl.gratext.gratext.accion _accion_7 = r.getAccion();
      NombreAccion _nombreAccion_3 = _accion_7.getNombreAccion();
      String _plus_15 = ("\' " + _nombreAccion_3);
      String _plus_16 = (_plus_15 + " el/la ");
      TiposDispositivo _nombre_6 = r.getNombre();
      String _plus_17 = (_plus_16 + _nombre_6);
      String descripcion_3 = (_plus_17 + "\'");
      ICompletionProposal propuesta_3 = this.createCompletionProposal(descripcion_3, context);
      acceptor.accept(propuesta_3);
    }
  }
  
  @Override
  public void completeAccion_NombreAccion(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal propuesta = this.createCompletionProposal("0.0", context);
    acceptor.accept(propuesta);
  }
}
