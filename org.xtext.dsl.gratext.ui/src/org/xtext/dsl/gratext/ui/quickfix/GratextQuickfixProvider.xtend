/*
 * generated by Xtext 2.10.0
 */
package org.xtext.dsl.gratext.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.xtext.dsl.gratext.validation.GratextValidator

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 * 
 * * @author :Jose antonio de Benito Suarez
 * Clase utilizada para el menu de contexto que ayuda al usuario a crear un dispositivo correctamente
 */
class GratextQuickfixProvider extends DefaultQuickfixProvider {

/* @Fix(RestauranteValidator :: NOMBRE_MUY_LARGO)
def arreglarNombre(Issue issue,IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Reducir nombre', 'Se limitara el tamaño de nombre al maximo sugerido','ingrediente.ico')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
		val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,nombreActual.substring(0,18)+ '\'');
	]
}*/

/** Metodo para la correcion de un dispositivo cuando su accion es incorrecta */
@Fix(GratextValidator:: ACCION_ESTADO)
def arreglarAccion(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'modificar accion segun dispositivo', 'Se modificara la accion a estado','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero ESTADO');
		
		]
}
/** Metodo para la correcion de un dispositivo cuando su numero es incorrecta */
@Fix(GratextValidator:: NUMERO_ENTERO)
def arreglarNumero(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion del numero', 'Se modificara numero dado que solo permite valores enteros','dispositivos.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
		val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,""+nombreActual.replace(".",""));
		]
}
/** Metodo para la correcion de un dispositivo barrera tiene una
 * accion incorrecta modificandola por abrir
 */
@Fix(GratextValidator:: ACCION_BARRERA)
def arreglarBarreraAbrir(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la barrera por abrir', 'Se modificara por la accion de abrir','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,'quiero ABRIR');
		
		]
}
/** Metodo para la correcion de un dispositivo barrera tiene una 
 * accion incorrecta modificandola por cerrar
 */
@Fix(GratextValidator:: ACCION_BARRERA)
def arreglarBarreraCerrar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la barrera por cerrar', 'Se modificara por la accion de cerrar','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,'quiero CERRAR');
		
		]
}
/** Metodo para la correcion de un dispositivo barrera tiene una 
 * accion incorrecta modificandola por estado
 */
@Fix(GratextValidator:: ACCION_BARRERA)
def arreglarBarreraEstado(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la barrera por estado', 'Se modificara por la accion de estado','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,'quiero ESTADO');
		
		]
}

/*AMBIENTE/INTERNA/NEVERA/MECEDORA/DEPOSITO_LECHE */
/** Metodo para la correcion de un dispositivo temperatura tiene un
 * lugar de tempertara incorrecto modificandola por ambiente
 */
@Fix(GratextValidator:: TEMPERATURA_LUGAR)
def arreglarBarreraAmbiente(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la temperatura por AMBIENTE', 'Se modificara por la temperatura AMBIENTE','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,"'AMBIENTE'");
		
		]
}
/** Metodo para la correcion de un dispositivo temperatura tiene un
 * lugar de tempertara incorrecto modificandola por interna
 */
@Fix(GratextValidator:: TEMPERATURA_LUGAR)
def arreglarBarreraINTERNA(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la temperatura por INTERNA', 'Se modificara por la temperatura INTERNA','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,"'INTERNA'");
		
		]
}
/** Metodo para la correcion de un dispositivo temperatura tiene un
 * lugar de tempertara incorrecto modificandola por nevera
 */
@Fix(GratextValidator:: TEMPERATURA_LUGAR)
def arreglarBarreraNEVERA(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la temperatura por NEVERA', 'Se modificara por la temperatura NEVERA','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,"'NEVERA'");
		
		]
}
/** Metodo para la correcion de un dispositivo temperatura tiene un
 * lugar de tempertara incorrecto modificandola por mecedora
 */
@Fix(GratextValidator:: TEMPERATURA_LUGAR)
def arreglarBarreraMECEDORA(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la temperatura por MECEDORA', 'Se modificara por la temperatura MECEDORA','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,"'MECEDORA'");
		
		]
}
/** Metodo para la correcion de un dispositivo temperatura tiene un
 * lugar de tempertara incorrecto modificandola por deposito de leche
 */
@Fix(GratextValidator:: TEMPERATURA_LUGAR)
def arreglarBarreraDEPOSITO_LECHE(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la temperatura por DEPOSITO de LECHE', 'Se modificara por la temperatura DEPOSITO deLECHE','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,"'DEPOSITO_LECHE'");
		
		]
}
/** Metodo para la correcion de un dispositivo que tiene una accion de las 
 * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender estado) modificandola por la accion
 * correcta de estado
 */
@Fix(GratextValidator:: ACCION_ADE)
def arreglarADEestado(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por ESTADO', 'Se modificara por la accion ESTADO','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero ESTADO');
		
		]
}
/** Metodo para la correcion de un dispositivo que tiene una accion de las 
 * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender, estado) modificandola por la accion
 * correcta de activar
 */
@Fix(GratextValidator:: ACCION_ADE)
def arreglarADEactivar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por ACTIVAR', 'Se modificara por la accion ACTIVAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero ACTIVAR');
		
		]
}
/** Metodo para la correcion de un dispositivo que tiene una accion de las 
 * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender estado) modificandola por la accion
 * correcta de descativar
 */
@Fix(GratextValidator:: ACCION_ADE)
def arreglarADEdesactivar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por DESACTIVAR', 'Se modificara por la accion DESACTIVAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero DESACTIVAR');
		
		]
}
/** Metodo para la correcion de un dispositivo que tiene una accion de las 
 * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender, estado) modificandola por la accion
 * correcta de apagar
 */
@Fix(GratextValidator:: ACCION_ADE)
def arreglarADEapagar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por APAGAR', 'Se modificara por la accion APAGAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero APAGAR');
		
		]
}
/** Metodo para la correcion de un dispositivo que tiene una accion de las 
 * denominadas ADE (abrir,cerrar,activar,desactivar,apagar,encender, estado) modificandola por la accion
 * correcta de encender
 */
@Fix(GratextValidator:: ACCION_ADE)
def arreglarADEencender(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por ENCENDER', 'Se modificara por la accion ENCENDER','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero ENCENDER');
		
		]
}
/** Metodo para la correcion de un dispositivo que tiene una accion de las 
 * de aumento o disminucion modificandola por la accion
 * correcta de aumentar
 */
@Fix(GratextValidator:: ACCION_AUMENTAR_DISMINUIR)
def arreglarAumentar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por AUMENTAR', 'Se modificara por la accion AUMENTAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero AUMENTAR');
		
		]
}
/** Metodo para la correcion de un dispositivo que tiene una accion de las 
 * de aumento o disminucion modificandola por la accion
 * correcta de disminuir
 */
@Fix(GratextValidator:: ACCION_AUMENTAR_DISMINUIR)
def arreglarDisminuir(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por DISMINUIR', 'Se modificara por la accion DISMINUIR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero DISMINUIR');
		
		]
}
/** Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
 * modificandola por la accion abrir
 */
@Fix(GratextValidator:: ACCION_CAMARA)
def arreglarCamaraAbrir(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por ABRIR', 'Se modificara por la accion ABRIR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero ABRIR');
		
		]
}
/** Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
 * modificandola por la accion cerrar
 */
@Fix(GratextValidator:: ACCION_CAMARA)
def arreglarCamaraCerrar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por CERRAR', 'Se modificara por la accion CERRAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero CERRAR');
		
		]
}
/** Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
 * modificandola por la accion sacar
 */
@Fix(GratextValidator:: ACCION_CAMARA)
def arreglarCamaraSacar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por SACAR', 'Se modificara por la accion SACAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero SACAR');
		
		]
}
/** Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
 * modificandola por la accion grabar
 */
@Fix(GratextValidator:: ACCION_CAMARA)
def arreglarCamaraGrabar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por GRABAR', 'Se modificara por la accion GRABAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero GRABAR');
		
		]
}
/** Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
 * modificandola por la accion activar
 */
@Fix(GratextValidator:: ACCION_CAMARA)
def arreglarCamaraActivar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por ACTIVAR', 'Se modificara por la accion ACTIVAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero ACTIVAR');
		
		]
}
/** Metodo para la correcion de un dispositivo de tipo camara que tiene una accion incorrecta
 * modificandola por la accion desactivar
 */
@Fix(GratextValidator:: ACCION_CAMARA)
def arreglarCamaraDesactivar(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion de la accion por DESACTIVAR', 'Se modificara por la accion DESACTIVAR','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,' quiero DESACTIVAR');
		
		]
}
/** Metodo para la correcion de otro dispositivo que no sea termostato y que tiene una accion 
 * de aumento/disminucion modificando este dispositivo por termostato
 */
@Fix(GratextValidator:: DISPOSITIVO_INCORRECTO)
def arreglarDispositivoTermostato(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion del dispositivo por TERMOSTATO', 'Se modificara el dispositivo por TERMOSTATO','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,'TERMOSTATO');
		
		]
}
/** Metodo para la correcion de otro dispositivo que no sea luz y que tiene una accion 
 * de aumento/disminucion modificando este dispositivo por luz
 */
@Fix(GratextValidator:: DISPOSITIVO_INCORRECTO)
def arreglarDispositivoLuz(Issue issue, IssueResolutionAcceptor acceptor){
	acceptor.accept(issue,'Modificacion del dispositivo por LUZ', 'Se modificara el dispositivo por LUZ','acciones.gif')[
		context | 
		val xtextDocumente = context.xtextDocument;// documento donde esta el modelo
	//	val nombreActual = xtextDocumente.get(issue.offset,issue.length);
		xtextDocumente.replace(issue.offset, issue.length,'LUZ');
		
		]
}
}
